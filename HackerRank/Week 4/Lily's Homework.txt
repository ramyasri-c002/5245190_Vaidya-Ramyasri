#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int value;
    int index;
} Pair;

int cmpAsc(const void *a, const void *b) {
    Pair *p1 = (Pair *)a;
    Pair *p2 = (Pair *)b;
    if (p1->value == p2->value) return p1->index - p2->index;
    return p1->value - p2->value;
}

int cmpDesc(const void *a, const void *b) {
    Pair *p1 = (Pair *)a;
    Pair *p2 = (Pair *)b;
    if (p1->value == p2->value) return p1->index - p2->index;
    return p2->value - p1->value;
}
 int countSwaps(Pair arr[], int n) {
    int visited[n];
    for (int i = 0; i < n; i++) visited[i] = 0;
    
    int swaps = 0;
    
    for (int i = 0; i < n; i++) {
        if (visited[i] || arr[i].index == i) continue;
        
        int cycle_len = 0;
        int j = i;
        
        while (!visited[j]) {
            visited[j] = 1;
            j = arr[j].index;
            cycle_len++;
        } 
        
        if (cycle_len > 0) swaps += (cycle_len - 1);
        
    }
    return swaps;
 }
int main() {
    int n;
    scanf("%d", &n);
    
    int original[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &original[i]);
    }
    
    Pair asc[n], desc[n];
    for (int i = 0; i < n; i++) {
        asc[i].value = original[i];
        asc[i].index = i;
        
        desc[i].value = original[i];
        desc[i].index = i;
    }
    
    qsort(asc, n, sizeof(Pair), cmpAsc);
    qsort(desc, n, sizeof(Pair), cmpDesc);
    
    int swapsAsc = countSwaps(asc, n);
    int swapsDesc = countSwaps(desc, n);
    
    printf("%d\n", (swapsAsc < swapsDesc) ? swapsAsc : swapsDesc);
    return 0;
}
