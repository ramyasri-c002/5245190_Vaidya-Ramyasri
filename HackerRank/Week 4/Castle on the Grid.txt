#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 105

typedef struct {
    int x, y, moves;
} Node;

char grid[MAX][MAX];
int visited[MAX][MAX];
int n;

int bfs(int sx, int sy, int gx, int gy) {
    Node queue[MAX * MAX];
    int front = 0, rear = 0;
    
    queue[rear++] = (Node){sx, sy, 0};
    visited[sx][sy] = 1;
    
    while (front < rear) {
        Node curr = queue[front++];
        
        if (curr.x == gx && curr.y == gy)
            return curr.moves;
            
         for (int i = curr.x - 1; i >= 0 && grid[i][curr.y] != 'X'; i--) {
            if (!visited[i][curr.y]) {
                visited[i][curr.y] = 1;
                queue[rear++] = (Node){i, curr.y, curr.moves + 1};
            }
         } 
         
         for (int i = curr.x + 1; i < n && grid[i][curr.y] != 'X'; i++) {
              if (!visited[i][curr.y]) {
                  visited[i][curr.y] = 1;
                  queue[rear++] = (Node){i, curr.y, curr.moves + 1};
              }
         }
         
         for (int j = curr.y - 1; j >= 0 && grid[curr.x][j] != 'X'; j--) {
              if (!visited[curr.x][j]) {
                  visited[curr.x][j] = 1;
                  queue[rear++] = (Node){curr.x, j, curr.moves + 1};
              }
         }
         
         for (int j = curr.y + 1; j < n && grid[curr.x][j] != 'X'; j++) {
              if (!visited[curr.x][j]) {
                  visited[curr.x][j] = 1;
                  queue[rear++] = (Node){curr.x, j, curr.moves + 1};
              }
         } 
    }
    return -1;
}   
    
int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        scanf("%s", grid[i]);
    }
        
    int sx, sy, gx, gy;
    scanf("%d %d %d %d", &sx, &sy, &gx, &gy);
        
    memset(visited, 0, sizeof(visited));
    printf("%d\n", bfs(sx, sy, gx, gy));
        
    return 0;
    }

