#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define ALPHABET_SIZE 26

struct TrieNode {
    struct TrieNode* children[ALPHABET_SIZE];
    bool isEnd;
};

struct TrieNode* createNode() {
    struct TrieNode* node = (struct TrieNode*)malloc(sizeof(struct TrieNode));
    node->isEnd = false;
    for (int i = 0; i < ALPHABET_SIZE; i++)
        node->children[i] = NULL;
    return node;    
}

bool insert(struct TrieNode* root, char* word) {
    struct TrieNode* current = root;
    bool isPrefixFound = false;
    
    for (int i = 0; word[i] != '\0'; i++) {
        int index = word[i] - 'a';
        
        if (current->children[index] == NULL)
            current->children[index] = createNode();
        
        current = current->children[index];
        
        if (current->isEnd && word[i + 1] != '\0')
            return false;    
    }
    
    if (current->isEnd)
        return false;
        
    for (int j = 0; j < ALPHABET_SIZE; j++)
         if (current->children[j] != NULL)
             return false;
             
    current->isEnd = true;
    return true;
}

int main() {
    int n;
    scanf("%d", &n);
    struct TrieNode* root = createNode();
    
    char word[100005];
    for (int i = 0; i < n; i++) {
        scanf("%s", word);
        if (!insert(root, word)) {
            printf("BAD SET\n%s\n", word);
            return 0;
        }
    }
    printf("GOOD SET\n");
    return 0;
}
