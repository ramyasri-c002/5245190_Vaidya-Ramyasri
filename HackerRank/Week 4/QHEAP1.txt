#include <stdio.h>

#define MAX_SIZE 100000

int heap[MAX_SIZE + 1];
int heap_size = 0;

void swap(int *a, int *b) {
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

void heapify_up(int idx) {
    while (idx > 1 && heap[idx] < heap[idx / 2]) {
        swap(&heap[idx], &heap[idx / 2]);
        idx /= 2;
    }
}

void heapify_down(int idx) {
    int smallest = idx;
    int left = idx * 2;
    int right = idx * 2 + 1;
    
    if (left <= heap_size && heap[left] < heap[smallest])
        smallest = left;
    if (right <= heap_size && heap[right] < heap[smallest])
        smallest = right;
        
     if (smallest != idx) {
        swap(&heap[idx], &heap[smallest]);
        heapify_down(smallest);
     }
}

void insert_heap(int val) {
    heap[++heap_size] = val;
    heapify_up(heap_size);
}

int find_index(int val) {
    for (int i = 1; i <= heap_size; i++) {
        if (heap[i] == val)
            return i;
    }
    return -1;
}

void delete_value(int val) {
    int idx = find_index(val);
    if (idx ==-1) return;
    
    heap[idx] = heap[heap_size--];
    heapify_up(idx);
    heapify_down(idx);
}

int get_min() {
    return heap[1];
}

int main() {
    int q;
    scanf("%d", &q);
    
    while (q--) {
        int type, val;
        scanf("%d", &type);
        
        if (type == 1) {
            scanf("%d", &val);
            insert_heap(val);
        } else if (type == 2) {
            scanf("%d", &val);
            delete_value(val);
        } else if (type == 3) {
            printf("%d\n", get_min());
        }
    }
    
    return 0;
}
